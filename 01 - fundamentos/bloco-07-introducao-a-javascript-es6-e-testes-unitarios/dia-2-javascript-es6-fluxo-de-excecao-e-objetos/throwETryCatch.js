// Throw e Try/Catch

// Para come√ßar, relembre o conte√∫do da aula anterior com este exemplo de arrow function :

const sum = (value1, value2) => value1 + value2;

console.log(sum(2, 3));

// Tudo funciona perfeitamente quando voc√™ tem o controle do c√≥digo, certo? Mas digamos que voc√™ est√° desenvolvendo uma aplica√ß√£o onde uma pessoa ir√° fornecer os valores. Sabemos que pessoas cometem erros e podem, por exemplo, tentar somar o n√∫mero 2 com a string '3'. O que aconteceria nesse caso?

const sum = (value1, value2) => value1 + value2;

console.log(sum(2, '3')); // resultado: 23

// 2 + '3' = 23?? Uma intera√ß√£o bastante inusitada, concorda? O que aconteceu foi que a sua fun√ß√£o, ao perceber que estava fazendo uma opera√ß√£o com par√¢metros de tipos distintos, tentou adapt√°-los para que o c√≥digo n√£o quebrasse - no caso, o primeiro par√¢metro foi convertido para uma string , e a opera√ß√£o realizada foi uma concatena√ß√£o de strings atrav√©s do sinal de + .
// Esse comportamento ocorre porque considera-se o JavaScript como uma linguagem din√¢mica . Ou seja, quando se declara uma vari√°vel, n√£o √© necess√°rio atrelar ela a nenhum tipo, o que permite inclusive que ela mude de tipo ao longo da execu√ß√£o do c√≥digo.
// Por mais que esse aspecto traga alguma flexibilidade, ele tamb√©m produz comportamentos inesperados que podem ser dif√≠ceis de identificar. Por isso, voc√™ enquanto boa pessoa programadora deve ser capaz de prever esses comportamentos e evitar que eles ocorram. üòâ
// Vamos adicionar uma condicional que impede a pessoa usu√°ria de quebrar a sua calculadora.

const sum = (value1, value2) => {
    if (typeof value1 !== 'number' || typeof value2 !== 'number') {
      return 'Os valores devem ser num√©ricos';
    }
    return value1 + value2;
  };
  
  console.log(sum(2, '3'));

//   Pronto, agora o seu c√≥digo avisa para a pessoa usu√°ria que a fun√ß√£o sum s√≥ aceita n√∫meros. Aparentemente est√° tudo funcionando como deveria, mas essa ainda n√£o √© a melhor forma de se tratar um erro em JavaScript . Na pr√°tica, a fun√ß√£o sum est√° retornando uma string, e essa n√£o √© o objetivo de uma fun√ß√£o que soma dois n√∫meros, certo? Voc√™ precisa indicar de alguma forma que ocorreu um erro.
//   Para isso existe o fluxo de exce√ß√£o: quando um erro acontece em Javascript, devemos lan√ßar uma exce√ß√£o, que vai interromper o funcionamento do c√≥digo. Essa √© a fun√ß√£o do throw :

const sum = (value1, value2) => {
    if (typeof value1 !== 'number' || typeof value2 !== 'number') {
      throw new Error('Os valores devem ser num√©ricos');
    }
    return value1 + value2;
  };
  
  console.log(sum(2, '3')); // retorna uma msg de erro no "sistema"

//   Percebeu a diferen√ßa? Agora a execu√ß√£o da fun√ß√£o sum foi interrompida e temos uma mensagem de erro no console, bem como uma indica√ß√£o da linha onde esse erro ocorre.

// Mas vamos detalhar por partes o que foi feito:
//     A palavra reservada throw serve para lan√ßar uma exce√ß√£o criada por voc√™. No caso, definimos que n√£o seria aceito um par√¢metro que n√£o fosse do tipo number , ent√£o criamos esse "erro customizado". Caso contr√°rio, a fun√ß√£o sum apresentaria um comportamento incorreto. Se quiser saber mais detalhes, consulte a documenta√ß√£o .
//     O operador new serve para criar um objeto personalizado ou nativo do JavaScript . Mais sobre o new aqui .
//     A palavra Error √© um objeto nativo do JavaScript que representa um erro. Quando voc√™ o chama com o operador new , voc√™ cria uma c√≥pia deste objeto, que ser√° lan√ßada como uma exce√ß√£o no seu c√≥digo. Veja mais sobre Error na documenta√ß√£o oficial .
// Voc√™ programou o c√≥digo para lan√ßar uma exce√ß√£o caso acontece√ßa um erro, mas o fluxo do c√≥digo ainda pode ser melhorado. Voc√™ precisa, por exemplo, capturar esse erro para melhor trat√°-lo. √â a√≠ que entra o bloco try/catch . Enquanto o try tenta executar o c√≥digo com sucesso, o catch √© chamado caso ocorra um erro.
// Aproveitando a ocasi√£o, seria uma √≥tima ideia refatorar a fun√ß√£o sum para que ela n√£o tenha funcionalidades demais.

const verifyIsNumber = (value1, value2) => {
    if (typeof value1 !== 'number' || typeof value2 !== 'number') {
      throw new Error('Os valores devem ser num√©ricos');
    }
  };
  
  const sum = (value1, value2) => {
    try {
      verifyIsNumber(value1, value2);
      return value1 + value2;
    } catch (error) {
      throw error.message;
    }
  };
  
  console.log(sum(2, '3'));

//   Agora sim! Voc√™ criou um fluxo para quando nosso c√≥digo √© executado com sucesso, representado pelo bloco try , que tenta fazer a soma de dois valores. Esse bloco chama a fun√ß√£o rec√©m-criada verifyIsNumber , que verifica se os par√¢metros passados s√£o n√∫meros. Quando se depara com um valor que n√£o √© um n√∫mero, o c√≥digo lan√ßa um erro com o throw , que √© capturado pelo catch no fluxo de exce√ß√£o, atrav√©s da vari√°vel error (aqui podemos usar qualquer nome). Dentro do catch retornamos a chave error.message , uma propriedade do objeto nativo Error que cont√©m a mensagem de erro criada anteriormente.
//   Como sempre, d√™ uma olhada na documenta√ß√£o oficial para aprofundar seus conhecimentos.
