// O que vamos aprender?

// Voc√™ aprender√° sobre testes unit√°rios e tamb√©m sobre como testar em pequenos passos.
// J√° o conceito de testar em pequenos passos fala sobre como orientar nosso desenvolvimento com base nos testes!
// Para isso, voc√™ utilizar√° o Jest , um framework de testes para JavaScript desenvolvido pelo Facebook.

// Voc√™ ser√° capaz de:

// Entender o que s√£o e para que servem testes unit√°rios;
// Aplicar o conceito de TDD, ou seja, o desenvolvimento orientado a testes;
// Criar testes unit√°rios a partir do framework Jest .

// Por que isso √© importante?

// O desenvolvimento de software n√£o √© algo simples e cada engrenagem de uma aplica√ß√£o pode ser muito delicada. S√£o muitas vari√°veis que voc√™ deve se preocupar, a cada vez que implementa alguma modifica√ß√£o, como o desempenho, disposi√ß√£o dos componentes e etc. Seria muito infeliz ter que checar cada retorno do seu c√≥digo antes de toda vez que for fazer um commit. Al√©m disso, n√£o seria confi√°vel, pois seres humanos cometem falhas. Por isso, programe a m√°quina para trabalhar a seu favor üòâ.
// Quando voc√™ pensa em comprar um carro, espera que ele tenha passado por diversos testes para garantir a sua seguran√ßa. Qualquer pessoa deseja um produto de qualidade, por que ent√£o n√£o criar aplica√ß√µes web com esse padr√£o tamb√©m? Afinal, a √∫nica consequ√™ncia ser√° reduzir defeitos e aumentar o valor do sistema.
// E o mais importante: o mindset que se desenvolve ao escrever testes para uma aplica√ß√£o for√ßa quem desenvolve a imaginar e prever os fluxos que uma pessoa pode percorrer ao usar a sua aplica√ß√£o. Isso diminui as chances de gerar bugs ou escrever c√≥digos que precisar√£o ser refeitos depois.
// Testes s√£o fundamentais e tem um grande valor no dia a dia de quem desenvolve. At√© o curso acabar, espera-se que a ideia de fazer um c√≥digo sem test√°-lo seja inc√¥moda . Voc√™ ir√° se formar com um mindset orientado a testes!

// Conte√∫dos

// Na ind√∫stria, qualidade √© algo perseguido h√° tempos! Diversas metodologias surgiram, sempre com o objetivo de melhorar a qualidade e ao mesmo tempo reduzir custo, pois a consequ√™ncia de um defeito pode ser desastroso, n√£o s√≥ para as finan√ßas, mas tamb√©m para o nome da empresa.
// Basicamente, existem tr√™s dimens√µes de qualidade que precisam ser consideradas:
// Confian√ßa : O sistema √© resistente a falhas durante a execu√ß√£o, isto √©, n√£o entra em loop , n√£o interrompe a execu√ß√£o por falta de recursos.
// Funcionalidade : O sistema se comporta conforme o que foi definido em seus requisitos.
// Performance : O sistema tem um tempo de resposta adequado e aceit√°vel, mesmo quando submetido a um volume de processamento pr√≥ximo de situa√ß√µes reais ou de pico.

// E, para atender a essas tr√™s dimens√µes, a pessoa que programa tem uma nova tarefa: desenvolver com foco em qualidade.

// Testes unit√°rios: uma analogia ao rel√≥gio

// Digamos que voc√™, como pessoa desenvolvedora de software em um universo paralelo, seja uma pessoa relojoeira. A sua responsabilidade √© confeccionar rel√≥gios de qualidade desde o zero, construindo desde as menores pe√ßas. Ao confeccionar as centenas de engrenagens, molas e parafusos que ir√£o constituir seu rel√≥gio, voc√™ deve seguir especifica√ß√µes.
// Cada unidade de engrenagens, molas e parafusos, ao serem confeccionadas, s√£o testadas individualmente, medidas e verificadas, para garantir que ir√£o funcionar conforme o esperado. Engrenagens devem suavemente girar, molas devem ter uma certa resist√™ncia, e parafusos devem ter diferentes espessuras e tamanhos, e por a√≠ vai.
// Como voc√™ poderia ter certeza de que cada pecinha do rel√≥gio est√° cumprindo sua devida fun√ß√£o?
// Com essa provoca√ß√£o, introduziremos voc√™ aos testes unit√°rios, que tem a fun√ß√£o de validar o comportamento do nosso c√≥digo de forma s√≥lida e precisa. 

// **** Testes unit√°rios s√£o por√ß√µes de c√≥digo respons√°veis por validar o comportamento de unidades funcionais de c√≥digo. ***

// Nesse contexto, entende-se como unidade funcional qualquer por√ß√£o de c√≥digo que, atrav√©s de algum est√≠mulo, seja capaz de gerar um comportamento esperado. Isso inclui fun√ß√µes, propriedades, construtores... tudo que, de alguma maneira, processe um comportamento de valor e que voc√™ deseja garantir que, apesar das altera√ß√µes em n√≠vel de c√≥digo, o comportamento siga sendo o mesmo.
// Portanto, os testes unit√°rios , assim como qualquer teste automatizado, permitem uma melhor manuten√ß√£o do seu c√≥digo. Eles n√£o servem somente para verificar se uma fun√ß√£o espec√≠fica est√° funcionando, mas tamb√©m para garantir que sua aplica√ß√£o continue funcionando ap√≥s alguma altera√ß√£o. Sendo assim, √© interessante pensar neles como um investimento de tempo para o futuro.

// Testando em pequenos passos

// O TDD: Test Driven Development , em tradu√ß√£o livre, o desenvolvimento orientado a testes , √© uma t√©cnica de desenvolvimento que, em certos cen√°rios, favorece a produtividade e a escrita de c√≥digos confi√°veis. Essa t√©cnica √© interessante porque ela ajuda a criar uma mente programadora orientada a testes , ainda que nem sempre escrever testes antes de escrever funcionalidades seja a pr√°tica mais adequada.
// O TDD √© muito importante como exerc√≠cio e para determinados tipos de projetos, mas est√° longe de ser um consenso na comunidade programadora como pr√°tica fundamental para 100% dos casos. √â importante que essa vis√£o cr√≠tica fique bem clara.
// Tendo isso em mente hoje voc√™ vai aprender e praticar o TDD, mas o conhecimento a ser absorvido √© "como testar bem uma aplica√ß√£o, de forma eficaz e produtiva" e "como ter um mindset orientado a testes", e n√£o especificamente como a metodologia funciona.
// Com muita pr√°tica e experi√™ncia, voc√™ ir√° desenvolver a intui√ß√£o necess√°ria para avaliar se o TDD √© a melhor abordagem para testar a sua aplica√ß√£o. Um exemplo interessante que o TDD pode ser bastante √∫til √© no teste de fun√ß√µes puras.
// O desenvolvimento orientado a testes √© um processo c√≠clico que pode ser descrito em tr√™s etapas, como ilustrado abaixo. O princ√≠pio b√°sico do TDD √© fazer testes pequenos.

// imagem: ciclo TDD.png

// Destrinchando cada etapa, o TDD consiste em:

//      Escrever um teste que cubra a fun√ß√£o que voc√™ pretende implementar antes mesmo de execut√°-la. Este teste ir√° falhar - afinal, a sua fun√ß√£o ainda n√£o foi declarada. Voc√™ pode come√ßar do teste mais elementar poss√≠vel para esse cen√°rio, como verificar se a fun√ß√£o que voc√™ ir√° criar existe.
//      Implementar apenas o necess√°rio para que o teste passe. No caso do exemplo anterior, voc√™ s√≥ precisaria declarar a fun√ß√£o para passar o teste.
//      Refatorar o c√≥digo para que ele esteja bem escrito e f√°cil de se entender. O pulo do gato nessa etapa √© que voc√™ tem um teste j√° implementado que ir√° falhar caso voc√™ quebre algo ao refatorar o seu c√≥digo.
//      Repetir! Afinal de contas, o desenvolvimento orientado a testes √© um ciclo. Volte a etapa 1 e repita esse processo at√© que todas as funcionalidades da sua fun√ß√£o sejam implementadas.
// Al√©m de ser √∫til para testar fun√ß√µes puras, outro exemplo pr√°tico em que o desenvolvimento orientado a testes pode ser √∫til √© consertar bugs. Os testes ajudam a quebrar problemas complexos em partes menores que podem ser analisadas mais facilmente. Assim, voc√™ poder√° focar em uma regra de neg√≥cio espec√≠fica sem medo de quebrar alguma outra funcionalidade.

// NodeJS Assert

// Para come√ßar, conhe√ßa um pouco sobre o NodeJS Assert.
// O m√≥dulo Assert √© uma ferramenta que testa express√µes. Esse m√≥dulo j√° vem instalado com o NodeJS . Podemos entender o assert como sendo uma express√£o booleana que ser√° sempre true , a menos que haja uma falha.
// Abaixo temos um exemplo de como podemos fazer um teste simples com assert :

const assert = require('assert'); // Sintaxe para incluir o m√≥dulo assert

assert.strictEqual(50, 50); // Sem erros: 50 === 50
assert.strictEqual(50, 70); // AssertionError: 50 !== 70

// Para o seu desenvolvimento durante o curso, ser√° necess√°rio o uso de ferramentas mais robustas, como o Jest , que voc√™ aprender√° na aula de hoje. Mas, caso tenha se interessado, voc√™ pode consultar mais sobre o NodeJS Assert aqui na documenta√ß√£o .
